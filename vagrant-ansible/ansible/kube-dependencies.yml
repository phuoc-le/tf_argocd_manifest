- hosts: all
  become: yes
  vars:
    KUBE_VERSION: '1.30.2'
    containerd_package: containerd.io
    containerd_package_state: present

    # Service options.
    containerd_service_state: started
    containerd_service_enabled: true

    # Write a default containerd config.toml file.
    containerd_config_default_write: true

    # Set systemd as cgroup driver in config.toml
    # Only use with containerd_config_default_write: true
    containerd_config_cgroup_driver_systemd: true

    # Used only for Debian/Ubuntu. Switch 'stable' to 'nightly' if needed.
    docker_apt_release_channel: stable
    docker_apt_arch: '{{ (ansible_architecture == "aarch64") | ternary("arm64", "amd64") }}'
    docker_apt_repository: "deb [arch={{ docker_apt_arch }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
    docker_apt_ignore_key_error: true
    docker_apt_gpg_key: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
  tasks:
    - name: Add config for containerd
      shell: |
        tee /etc/modules-load.d/containerd.conf <<EOF
        overlay
        br_netfilter
        EOF
    - name: Add config for containerd
      shell: modprobe overlay

    - name: Add config for containerd
      shell: modprobe br_netfilter

    - name: Set Kernel parameters for Kubernetes
      shell: |
        tee /etc/sysctl.d/kubernetes.conf <<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF

    - name: Reload config
      shell: sysctl --system

    - name: Install a list of packages
      ansible.builtin.apt:
        pkg:
          - net-tools
          - apt-transport-https
          - software-properties-common
          - ca-certificates
          - curl
    - name: Add Docker apt key.
      apt_key:
        url: "{{ docker_apt_gpg_key }}"
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        state: present
      register: add_repository_key
      ignore_errors: "{{ docker_apt_ignore_key_error }}"

    - name: Add Docker apt key (alternative for older systems without SNI).
      shell: >
        curl -sSL {{ docker_apt_gpg_key }} | sudo apt-key add -
      when: add_repository_key is failed

    - name: Add Docker repository.
      apt_repository:
        repo: "{{ docker_apt_repository }}"
        state: present
        update_cache: true

    - name: Ensure containerd is installed.
      package:
        name: "{{ containerd_package }}"
        state: "{{ containerd_package_state }}"

    - name: Ensure containerd is started and enabled at boot.
      service:
        name: containerd
        state: "{{ containerd_service_state }}"
        enabled: "{{ containerd_service_enabled }}"

    - name: Ensure containerd config directory exists.
      file:
        path: /etc/containerd
        state: directory
      register: containerd_dir

    - name: Get defaults from containerd.
      command: containerd config default
      changed_when: false
      register: containerd_config_default
      when: containerd_config_default_write

    - name: Prepare containerd/config.toml from default config
      copy:
        dest: /tmp/containerd_config.toml
        content: "{{ containerd_config_default.stdout }}"
      when: containerd_config_default_write
      changed_when: false

    - name: Set Cgroup driver to systemd
      lineinfile:
        insertafter: '.*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]$'
        line: '          SystemdCgroup = true'
        state: present
        path: /tmp/containerd_config.toml
      when: containerd_config_default_write and containerd_config_cgroup_driver_systemd
      changed_when: false

    - name: Make sure  SystemdCgroup = false is not set
      ansible.builtin.lineinfile:
        path: /tmp/containerd_config.toml
        state: absent
        line: '            SystemdCgroup = false'
      notify: restart containerd
      when: containerd_config_default_write and containerd_config_cgroup_driver_systemd
      changed_when: false

    - name: Copy config.toml to /etc/containerd
      copy:
        remote_src: true
        src: /tmp/containerd_config.toml
        dest: /etc/containerd/config.toml
      notify: restart containerd
      when: containerd_config_default_write

    - name: Cleanup temporary file
      file:
        path: /tmp/containerd_config.toml
        state: absent
      changed_when: false

    - name: Ensure containerd is restarted immediately.
      service:
        name: containerd
        state: restarted

    - name: Download the public signing key for the Kubernetes
      get_url: "url=https://pkgs.k8s.io/core:/stable:/v{{KUBE_VERSION[0:4]}}/deb/Release.key dest=/tmp/Release.key"

    - name: Add the signing key
      shell: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --batch --yes /tmp/Release.key

    - name: "Add the appropriate Kubernetes apt repository for {{KUBE_VERSION[0:4]}} version"
      shell: |
        tee /etc/apt/sources.list.d/kubernetes.list <<EOF
        deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{KUBE_VERSION[0:4]}}/deb/ /
        EOF

    - name: Update apt packages
      apt:
        update_cache: true

    - name: install kubelet
      apt:
        name: kubelet={{KUBE_VERSION}}-*
        state: present
        update_cache: true

    - name: install kubeadm
      apt:
        name: kubeadm={{KUBE_VERSION}}-*
        state: present

    - name: Hold kubelet
      ansible.builtin.dpkg_selections:
        name: kubelet
        selection: hold

    - name: Hold kubeadm
      ansible.builtin.dpkg_selections:
        name: kubeadm
        selection: hold
  handlers:
    - name: restart containerd
      service:
        name: containerd
        state: restarted

- hosts: masters
  become: yes
  vars:
    KUBE_VERSION: '1.30.2'
  tasks:
    - name: install kubectl
      apt:
        name: kubectl={{KUBE_VERSION}}-*
        state: present

    - name: Hold kubectl
      ansible.builtin.dpkg_selections:
        name: kubectl
        selection: hold

    - name: Install helm
      snap:
        name: helm
        classic: true
        state: present

    - name: install pip
      apt:
        name: python3-pip
        state: present

    - name: Remove old files Python EXTERNALLY-MANAGED
      shell: sudo rm -f /usr/lib/python3*/EXTERNALLY-MANAGED

    - name: install pre-requisites
      become_user: "{{ ansible_user }}"
      pip:
        name:
          - openshift
          - PyYAML
          - kubernetes

- hosts: workers
  become: yes
  tasks:
    - name: install nfs-common
      apt:
        name: nfs-common
        state: present